plugins {
    id "org.sonarqube" version "3.4.0.2513"
}

ext {
    javaVersion = JavaVersion.VERSION_1_8
    springBootVersion = "2.7.18"
    springCloudVersion = "2021.0.9"
    micaAutoVersion = "2.3.5"
    micaWeiXinVersion = "2.1.2"
    knife4jVersion = "3.0.3"
    springDocVersion = "1.7.0"
    swaggerVersion = "1.5.22"
    swagger3xVersion = "2.2.19"
    druidVersion = "1.2.24"
    okhttpVersion = "4.12.0"
    jsoupVersion = "1.18.1"
    xxlJobVersion = "2.4.1"
    lombokVersion = "1.18.34"
    findbugsVersion = "3.0.2"
    logstashVersion = "7.4"
    lokiLogbackAppender = "1.4.2"
    zxingVersion = "3.5.3"
    jetCacheVersion = "2.7.3"
    jfinalVersion = "5.2.2"
}

configure(subprojects) {
    group = GROUPID
    version = VERSION
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    // ci 自动发布 SNAPSHOT 版本
    task publishSnapshot(type: GradleBuild) {
        if (VERSION.endsWith('SNAPSHOT')) {
            tasks = ['clean', 'build', 'publish']
        }
    }
}

apply from: "${rootProject.projectDir}/gradle/quality.gradle"
configure(subprojects - project(":mica-bom")) {
    apply plugin: "java-library"
    apply from: "${rootProject.projectDir}/gradle/publish-jar.gradle"
    sourceCompatibility = "$javaVersion"
    targetCompatibility = "$javaVersion"
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters" << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    dependencies {
        // import BOM.
        implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
        implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
        compileOnly "org.slf4j:slf4j-api"
        compileOnly "jakarta.servlet:jakarta.servlet-api"
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        // swagger 暂时有问题 https://github.com/springfox/springfox/issues/2763
//        annotationProcessor "org.springframework:spring-context-indexer:${springVersion}"
        // JSR-305 only used for non-required meta-annotations
        compileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"
        testCompileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.springframework:spring-test"
        testImplementation "org.slf4j:slf4j-api"
        testImplementation "org.junit.jupiter:junit-jupiter"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter"
    }

    compileJava.dependsOn(processResources)
}

def getSonarToken() {
    return System.getenv('SONAR_TOKEN') ?: SONAR_TOKEN
}

def getRepositoryUsername() {
    return System.getenv('NEXUS_OSS_USER_NAME') ?: NEXUS_OSS_USER_NAME
}

def getRepositoryPassword() {
    return System.getenv('NEXUS_OSS_PASS_WORD') ?: NEXUS_OSS_PASS_WORD
}
